from sys import stdout
from makeup_artist import Makeup_artist
from flask_socketio import SocketIO
from camera import Camera
from utilss import base64_to_pil_image, pil_image_to_base64
import base64
####
import os
import json
import face_recognition
from flask import Flask,redirect, url_for, request, Response,jsonify,render_template
from flask_restful import Api, Resource, reqparse
import utils
from flask_cors import CORS
from flask_sslify import SSLify
#Python para implementar microservicios

app = Flask(__name__,template_folder='template')
api = Api(app)
socketio = SocketIO(app)
sslify = SSLify(app)
CORS(app)

#Identifica la carpeta donde se dejaran las fotografias que se suben
UPLOAD_FOLDER = os.path.basename('uploads')
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

kycfaceid= utils.kycfaceid


@app.route('/kycface')
def index():
    return render_template('index.html')

@app.route('/kycface/creargrupo')
def creargrupo():
    return render_template('creargrupo.html')

@app.route('/kycface/crearusuario')
def crearusuario():
    return render_template('crearusuario.html')

@app.route('/kycface/enrolarusuario')
def enrolarusuario():
    return render_template('enrolarusuario.html')

@app.route('/kycface/anadircara')
def anadircara():
    return render_template('anadircara.html')

@app.route('/kycface/detectarrostro')
def detectarrostro():
    return render_template('detectarrostro.html')


@socketio.on('input image', namespace='/kycface/test')
def test_message(input):
    input = input.split(",")[1]
    camera.enqueue_input(input)    

@socketio.on('connect', namespace='/kycface/test')
def test_connect():
    app.logger.info("client connected")

def gen():    
    app.logger.info("starting to generate frames!")
    while True:
        frame = camera.get_frame()         
        yield (frame)


@app.route('/kycface/video_feed')
def video_feed(): 
    b64_bytes = base64.b64encode(gen())
    b64_string = b64_bytes.decode()

    verifica = kycfaceid.userFaceAuth(b64_string)

    return verifica


@app.route('/kycfaceid/group/adduser', methods=['POST'])
def groupAddUser():
    groupid = request.form['groupId']
    userid = request.form['userId']
            
    verifica = kycfaceid.groupAddUser(groupid,userid)

    js = json.dumps(verifica, indent=2)
    resp = Response(js, status=200, mimetype='application/json')

    return  resp

@app.route('/kycfaceid/group/create', methods=['POST'])
def groupCreate():    
    groupname = request.form['groupName']
    access = request.form['facetestaccess']
            
    verifica = kycfaceid.groupCreate(groupname, access)
   
    js = json.dumps(verifica, indent=2)
    resp = Response(js, status=200, mimetype='application/json')
    
    return  resp

@app.route('/kycfaceid/group/edit', methods=['POST'])
def groupEdit():
    groupid = request.form['groupId']
    groupmame = request.form['groupName']
    size = request.form['sizeLimit']
            
    verifica = kycfaceid.groupEdit(groupid, groupmame,size)

    js = json.dumps(verifica, indent=2)
    resp = Response(js, status=200, mimetype='application/json')

    return  resp

@app.route('/kycfaceid/group/get', methods=['POST'])
def groupGet():
    groupid = request.form['groupId']
        
    verifica = kycfaceid.groupGet(groupid)

    js = json.dumps(verifica, indent=2)
    resp = Response(js, status=200, mimetype='application/json')

    return  resp

@app.route('/kycfaceid/group/list', methods=['GET','POST'])
def groupList():
        
    verifica = kycfaceid.groupList()

    js = json.dumps(verifica, indent=2)
    resp = Response(js, status=200, mimetype='application/json')

    return  resp

@app.route('/kycfaceid/group/listuser', methods=['GET','POST'])
def groupListUser():
    userif=None
    if request.method == 'POST':
        userid = request.form['userId']    
    else:
        userid = request.args.get('userId')

    verifica = kycfaceid.groupListUser(userid)

    js = json.dumps(verifica, indent=2)
    resp = Response(js, status=200, mimetype='application/json')

    return  resp

@app.route('/kycfaceid/group/listusers', methods=['POST'])
def groupListUsers():
    groupid = request.form['groupId']
    userid = request.form['userId']
    grouprole = request.form['groupRole']
        
    verifica = kycfaceid.groupListUsers(groupid,userid,grouprole)

    js = json.dumps(verifica, indent=2)
    resp = Response(js, status=200, mimetype='application/json')

    return  resp

@app.route('/kycfaceid/group/remove', methods=['POST'])
def groupRemove():
    groupid = request.form['groupId']  
        
    verifica = kycfaceid.groupRemove(groupid)

    js = json.dumps(verifica, indent=2)
    resp = Response(js, status=200, mimetype='application/json')

    return  resp

@app.route('/kycfaceid/group/removeuser', methods=['POST'])
def groupRemoveUser():
    groupid = request.form['groupId']  
    userid = request.form['userId']  
        
    verifica = kycfaceid.groupRemoveUser(groupid, userid)

    js = json.dumps(verifica, indent=2)
    resp = Response(js, status=200, mimetype='application/json')

    return  resp

@app.route('/kycfaceid/group/userrole', methods=['POST'])
def groupUserRole():
    groupid = request.form['groupId']  
    userid = request.form['userId']
    grouprole = request.form['groupRole']  
        
    verifica = kycfaceid.groupUserRole(groupid, userid, grouprole)

    js = json.dumps(verifica, indent=2)
    resp = Response(js, status=200, mimetype='application/json')

    return  resp

@app.route('/kycfaceid/user/addface', methods=['POST'])
def userAddFace():
    userid = request.form['userId']     
    file = request.file['image'] 


    
    verifica = kycfaceid.userAddFace(file , userid)

    js = json.dumps(verifica, indent=2)
    resp = Response(js, status=200, mimetype='application/json')

    return  resp

@app.route('/kycfaceid/user/auth', methods=['POST'])
def userAuth():
    userid = request.form['userId']     
    otp = request.form['otp']  
    permanent = request.form['permanent']  
        
    verifica = kycfaceid.userAuth(userid, opt, permanent)

    js = json.dumps(verifica, indent=2)
    resp = Response(js, status=200, mimetype='application/json')

    return  resp

@app.route('/kycfaceid/user/create', methods=['POST'])
def userCreate():
    name = request.form['name']
    lastname = request.form['lastname']              
    details = request.form['details']     

    verifica = kycfaceid.userCreate(name,lastname,details)

    js = json.dumps(verifica, indent=2)
    resp = Response(js, status=200, mimetype='application/json')

    return  resp

@app.route('/kycfaceid/user/edit', methods=['POST'])
def userEdit():
    userid = request.form['userId']      
    details = request.form['details']  

    verifica = kycfaceid.userEdit(userid, details)

    js = json.dumps(verifica, indent=2)
    resp = Response(js, status=200, mimetype='application/json')

    return  resp

@app.route('/kycfaceid/user/renroll', methods=['POST'])
def userEnroll():
    userid = request.form['userId']      
    details = request.form['details']  
    groupid = request.form['groupId']  
    face1 = request.files['face1'] 
    face2 = request.files['face2'] 

    verifica = kycfaceid.userEnroll(userid, details, groupid, face1, face2)

    js = json.dumps(verifica, indent=2)
    resp = Response(js, status=200, mimetype='application/json')

    return  resp

@app.route('/kycfaceid/user/get', methods=['POST'])
def userGet():
    userid = request.form['userId']         

    verifica = kycfaceid.userGet(userid)

    js = json.dumps(verifica, indent=2)
    resp = Response(js, status=200, mimetype='application/json')

    return  resp

@app.route('/kycfaceid/user/getopt', methods=['POST'])
def userGetOTP():
    userid = request.form['userId']         

    verifica = kycfaceid.userGetOTP(userid)

    js = json.dumps(verifica, indent=2)
    resp = Response(js, status=200, mimetype='application/json')

    return  resp

@app.route('/kycfaceid/user/faceauth', methods=['POST'])
def userFaceAuth():
    userid = request.form['userId']     
    file = request.files['image']  
    
    f = os.path.join("/root/work/face/", file.filename)
    

    file.save(f)

    verifica = kycfaceid.userFaceAuth(f, userid)

    js = json.dumps(verifica, indent=2)
    resp = Response(js, status=200, mimetype='application/json')

    return  resp

@app.route('/kycfaceid/user/remove', methods=['POST'])
def userRemove():
    userid = request.form['userId']     
           
    verifica = kycfaceid.userRemove(userid)

    js = json.dumps(verifica, indent=2)
    resp = Response(js, status=200, mimetype='application/json')

    return  resp

@app.route('/kycfaceid/user/removeface', methods=['POST'])
def userRemoveFace():
    userid = request.form['userId']   
    faceid = request.form['faceId']   
           
    verifica = kycfaceid.userRemoveFace(userid,faceid)

    js = json.dumps(verifica, indent=2)
    resp = Response(js, status=200, mimetype='application/json')

    return  resp

@app.route('/kycfaceid/user/role', methods=['POST'])
def userRole():
    roles = request.form['roles']   
    userid = request.form['userId']   
           
    verifica = kycfaceid.userRole(userid,faceid)

    js = json.dumps(verifica, indent=2)
    resp = Response(js, status=200, mimetype='application/json')

    return  resp

@app.route('/kycfaceid/user/list', methods=['POST'])
def userList():
           
    verifica = kycfaceid.userList()

    js = json.dumps(verifica, indent=2)
    resp = Response(js, status=200, mimetype='application/json')

    return  resp


@app.route('/kycfaceid/image/recognize', methods=['POST'])
def recognize():
    file = request.files['image']
    f = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
        
    file.save(f)

    verifica = kycfaceid.recognize(f, "groupId")

    js = json.dumps(verifica)
    resp = Response(js, status=200, mimetype='application/json')

    return  resp

@app.route('/kycfaceid/image/verify', methods=['POST'])
def verify():
    file = request.files['image']
    userid = request.form['userid']

    f = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
        
    file.save(f)


    verifica = kycfaceid.verify(f, userId)

    js = json.dumps(verifica)
    resp = Response(js, status=200, mimetype='application/json')

    return  resp


        
if __name__ == "__main__":
# socketio.run(app)
 app.run()
